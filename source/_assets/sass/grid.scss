// $grid-breakpoints: (
//   0: 1,
//   1: 750,
//   2: 1000,
//   3: 1400,
//   4: 1900,
//   5: 2500,
//   6: 3800,
//   7: 5000 // max
// );

$grid-max: 5000;

$grid-space: 50;
//$grid-columns: map-get($grid-breakpoints, length($grid-breakpoints) - 1) / $grid-space;
$grid-columns: $grid-max / $grid-space;
$grid-spacing: ($grid-space * 1px);
$grid-color: #c3598c;
$grid-bg: #080808;
@include block('grid') {
  background: #000;
  bottom:0;
  height: 100vh;
  left:0;
  overflow: hidden;
  position: absolute;
  width: 100vw;
  perspective: 200px;
  // Space
  &::after {
    content: ' ';
    display: block;
    width: 100%;
    height: 30%;
    position: absolute;
    top:0;
    left:0;
    background-image: radial-gradient(circle, transparent 0%, rgba(0,0,0,1) 67%), url('/assets/images/space.jpg');
    background-repeat: no-repeat;
    background-size: cover;
    background-position: bottom center;
  }
  // Grid plane
  @include element('plane') {
    transform: rotateX(30deg) translateX(-50%) translateZ(-25px);
    position: absolute;
    bottom:0;
    left:50%;
    width: $grid-max * 1px;
    height: 110%;
    background: $grid-bg;
    z-index: 2;
    transition: transform 2s ease-in-out;
    opacity: 1;
    // Fade
    &::after {
      content: ' ';
      display: block;
      width: 100%;
      height: 150%;
      position: absolute;
      top:0;
      left:0;
      background-image: radial-gradient(transparent, #000);
      z-index: 3;
    }

  }
  // Lines
  @include element('line') {
    height: 1px;
    position: absolute;
    width: 1px;
    z-index: 2;
    // display: none;
    &::before, &::after {
      content: ' ';
      display: block;
      height: 100vh;
      left:0;
      position: absolute;
      top:0;
      width: 1px;
      background-color: $grid-color;
      box-shadow: 0 0 0.5px 0.25px #FFF, 0 0 1px 0.5px $grid-color;
    }
    // horizontal lines
    &::after {
      transform: rotate(-90deg);
      transform-origin: top;
      // height: calc(100vw + #{$grid-spacing*2});
      height: $grid-max * 1px;
    }

    // generate lines
    @for $i from 0 to $grid-columns {
      @include modifier($i) {
        left: ($i * $grid-spacing);
        &::after {
          // top: ($i * $grid-spacing);
          transform: rotate(-90deg) translate((-1 * $i * $grid-spacing), (-1 * $i * $grid-spacing))
        }
      }
    }
/*
    @each $key, $bp in $grid-breakpoints {
      @media screen and (min-width: $bp) {
        @for $i from round(($bp / $grid-space)) to round((map-get($grid-breakpoints, ($key+1)) / $grid-space)) {
          @include modifier($i) {
            display: block;
          }
          @if $key+1 > length($grid-breakpoints) {
            @break;
          }
        }
      }
    }
*/

    // @for $i from 0 to (length($grid-breakpoints) - 1) {
    //   @media screen and (min-width: (map-get($grid-breakpoints, $i) * 1px)) {
    //     @for $j from round((map-get($grid-breakpoints, $i) / $grid-space)) to round((map-get($grid-breakpoints, $i+1) / $grid-space)) {
    //       @include modifier($j) {
    //         display: block;
    //       }
    //     }
    //   }
    // }


  }
  // .grid.is-hidden
  @include state('hidden') {
    .grid__plane {
      transform: rotateX(30deg) translateX(-50%) translateZ(-75px);
    }
  }
}